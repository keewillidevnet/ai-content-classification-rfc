#!/bin/bash

# CLI Usage Examples
# Demonstrates comprehensive usage of the AI Content Classification CLI tools

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print section headers
print_section() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

print_example() {
    echo -e "\n${YELLOW}Example: $1${NC}"
}

print_command() {
    echo -e "${GREEN}$ $1${NC}"
}

print_info() {
    echo -e "${PURPLE}ℹ️  $1${NC}"
}

# Setup test environment
setup_test_environment() {
    print_section "Setting up test environment"
    
    # Create test directories
    mkdir -p test-workspace/{content,output,batch-test}
    cd test-workspace

    # Create sample content files
    cat > content/human-article.txt << 'EOF'
# The Impact of AI on Modern Journalism

## Introduction

As a journalist with over 15 years of experience, I've witnessed firsthand how artificial intelligence is transforming our industry. This analysis draws from my personal observations and interviews with newsroom leaders across the country.

## Key Findings

Traditional reporting methods are being augmented, not replaced, by AI tools. Human insight, critical thinking, and ethical judgment remain irreplaceable in quality journalism.

## Conclusion

The future of journalism lies in thoughtful human-AI collaboration, not replacement.

---
Author: Sarah Martinez, Senior Journalist
Date: July 2025
EOF

    cat > content/ai-generated.txt << 'EOF'
# Top 10 Digital Marketing Strategies for 2025

## 1. Personalized Content at Scale
Leverage AI-powered content generation to create targeted messaging for different audience segments while maintaining brand consistency.

## 2. Voice Search Optimization
Optimize your content for voice queries as smart speakers and voice assistants become increasingly prevalent in consumer behavior.

## 3. Interactive Video Content
Implement shoppable videos and interactive elements to boost engagement rates and conversion metrics.

## 4. Micro-Influencer Partnerships
Collaborate with niche influencers who have highly engaged audiences rather than focusing solely on follower count.

## 5. Predictive Analytics
Use machine learning algorithms to anticipate customer behavior and optimize campaign performance.

---
Generated by: MarketingAI Pro
Model: marketing-gpt-2025
Template: Top 10 Lists - Digital Marketing
EOF

    cat > content/hybrid-blog.txt << 'EOF'
# My Journey with AI Writing Tools: A Content Creator's Perspective

*Written by Alex Chen, Content Creator*
*Research assistance and editing support provided by AI*

## Introduction

As someone who creates content professionally, I've been experimenting with AI writing tools for the past year. This post shares my honest experience with the benefits and challenges of human-AI collaboration in content creation.

## What I've Learned

The most effective approach isn't to let AI write everything, but to use it as a research assistant and editor. I still provide the creative vision, personal insights, and final quality control.

## Tools I Use

- GPT-4 for research and brainstorming
- Grammarly for grammar and style checking
- DALL-E 3 for blog post illustrations
- My own experience and expertise for the core content

## Best Practices

1. Always maintain editorial control
2. Fact-check AI-generated research
3. Preserve your authentic voice
4. Be transparent about AI assistance

## Conclusion

AI tools have made me more efficient, but they haven't replaced the need for human creativity, empathy, and domain expertise.

---
Author: Alex Chen
AI Tools: GPT-4, Grammarly, DALL-E 3
Human Contribution: Core writing, personal insights, final editing
EOF

    print_info "Test environment created with sample content files"
}

# Example 1: Basic Content Tagging
example_basic_tagging() {
    print_example "Basic Content Tagging"
    
    print_command "tag-content -i content/human-article.txt --origin human --author 'Sarah Martinez' --license 'CC-BY-4.0' --verbose"
    
    # Run the actual command
    if command -v tag-content &> /dev/null; then
        tag-content -i content/human-article.txt --origin human --author "Sarah Martinez" --license "CC-BY-4.0" --verbose
    else
        node ../../../cli/tag-content.js -i content/human-article.txt --origin human --author "Sarah Martinez" --license "CC-BY-4.0" --verbose
    fi
    
    print_info "Creates: human-article.txt.tagged and human-article.txt.tagged.meta.xml"
}

# Example 2: AI Content Tagging
example_ai_tagging() {
    print_example "AI Content Tagging"
    
    print_command "tag-content -i content/ai-generated.txt --origin ai --author 'MarketingAI Pro' --toolchain 'MarketingAI Pro v2.0' --model 'marketing-gpt-2025'"
    
    if command -v tag-content &> /dev/null; then
        tag-content -i content/ai-generated.txt --origin ai --author "MarketingAI Pro" --toolchain "MarketingAI Pro v2.0" --model "marketing-gpt-2025"
    else
        node ../../../cli/tag-content.js -i content/ai-generated.txt --origin ai --author "MarketingAI Pro" --toolchain "MarketingAI Pro v2.0" --model "marketing-gpt-2025"
    fi
    
    print_info "Tagged AI-generated content with model information"
}

# Example 3: Hybrid Content Tagging
example_hybrid_tagging() {
    print_example "Hybrid Content Tagging"
    
    print_command "tag-content -i content/hybrid-blog.txt --origin hybrid --author 'Alex Chen + AI Assistant' --license 'CC-BY-4.0' --toolchain 'GPT-4, Grammarly, DALL-E 3' --verbose"
    
    if command -v tag-content &> /dev/null; then
        tag-content -i content/hybrid-blog.txt --origin hybrid --author "Alex Chen + AI Assistant" --license "CC-BY-4.0" --toolchain "GPT-4, Grammarly, DALL-E 3" --verbose
    else
        node ../../../cli/tag-content.js -i content/hybrid-blog.txt --origin hybrid --author "Alex Chen + AI Assistant" --license "CC-BY-4.0" --toolchain "GPT-4, Grammarly, DALL-E 3" --verbose
    fi
    
    print_info "Tagged hybrid content with multiple AI tools listed"
}

# Example 4: Content Validation
example_validation() {
    print_example "Content Validation"
    
    print_command "validate-content -i content/human-article.txt.tagged --verbose --verify"
    
    if command -v validate-content &> /dev/null; then
        validate-content -i content/human-article.txt.tagged --verbose --verify
    else
        node ../../../cli/validate-content.js -i content/human-article.txt.tagged --verbose --verify
    fi
    
    print_info "Validates content integrity and metadata compliance"
}

# Example 5: Metadata Extraction
example_extraction() {
    print_example "Metadata Extraction"
    
    print_command "extract-metadata -i content/ai-generated.txt.tagged --verbose --verify"
    
    if command -v extract-metadata &> /dev/null; then
        extract-metadata -i content/ai-generated.txt.tagged --verbose --verify
    else
        node ../../../cli/extract-metadata.js -i content/ai-generated.txt.tagged --verbose --verify
    fi
    
    print_info "Extracts and displays metadata with integrity verification"
}

# Example 6: JSON Output for Scripting
example_json_output() {
    print_example "JSON Output for Scripting"
    
    print_command "extract-metadata -i content/hybrid-blog.txt.tagged --json > output/metadata.json"
    
    if command -v extract-metadata &> /dev/null; then
        extract-metadata -i content/hybrid-blog.txt.tagged --json > output/metadata.json
    else
        node ../../../cli/extract-metadata.js -i content/hybrid-blog.txt.tagged --json > output/metadata.json
    fi
    
    echo "Generated JSON output:"
    cat output/metadata.json | head -10
    
    print_info "JSON output perfect for integration with other tools"
}

# Example 7: HTML Meta Tag Injection
example_html_meta() {
    print_example "HTML Meta Tag Injection"
    
    # Create sample HTML
    cat > content/sample-page.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Sample Article</title>
</head>
<body>
    <h1>My Article</h1>
    <p>This is a sample article for demonstration.</p>
</body>
</html>
EOF
    
    print_command "html-meta-tool inject -i content/sample-page.html --origin human --author 'Web Team' --license 'MIT' --verbose"
    
    if command -v html-meta-tool &> /dev/null; then
        html-meta-tool inject -i content/sample-page.html --origin human --author "Web Team" --license "MIT" --verbose
    else
        node ../../../cli/html-meta-tool.js inject -i content/sample-page.html --origin human --author "Web Team" --license "MIT" --verbose
    fi
    
    print_info "Injected RFC-compliant meta tags into HTML head"
}

# Example 8: HTML Meta Tag Extraction
example_html_extraction() {
    print_example "HTML Meta Tag Extraction"
    
    print_command "html-meta-tool extract -i content/sample-page.html --verbose"
    
    if command -v html-meta-tool &> /dev/null; then
        html-meta-tool extract -i content/sample-page.html --verbose
    else
        node ../../../cli/html-meta-tool.js extract -i content/sample-page.html --verbose
    fi
    
    print_info "Extracted metadata from HTML meta tags"
}

# Example 9: Batch Processing
example_batch_processing() {
    print_example "Batch Processing"
    
    # Create more test files
    cp content/human-article.txt batch-test/article1.txt
    cp content/ai-generated.txt batch-test/article2.txt
    cp content/hybrid-blog.txt batch-test/article3.txt
    
    print_command "html-meta-tool batch -d batch-test --origin human --author 'Batch Processor' --verbose"
    
    if command -v html-meta-tool &> /dev/null; then
        html-meta-tool batch -d batch-test --origin human --author "Batch Processor" --verbose
    else
        node ../../../cli/html-meta-tool.js batch -d batch-test --origin human --author "Batch Processor" --verbose
    fi
    
    print_info "Processed multiple files in batch mode"
}

# Example 10: Pipeline Integration
example_pipeline_integration() {
    print_example "Pipeline Integration"
    
    print_info "Creating a complete content processing pipeline..."
    
    # Create pipeline script
    cat > pipeline-demo.sh << 'EOF'
#!/bin/bash

# Content Processing Pipeline
echo "🔄 Processing content pipeline..."

# Step 1: Tag all content
for file in content/*.txt; do
    echo "Tagging: $file"
    tag-content -i "$file" --origin human --author "Pipeline" --license "MIT" 2>/dev/null || node ../../../cli/tag-content.js -i "$file" --origin human --author "Pipeline" --license "MIT" 2>/dev/null
done

# Step 2: Validate all tagged content
echo "📋 Validation Report:"
for file in content/*.tagged; do
    echo "Validating: $file"
    validate-content -i "$file" --verify 2>/dev/null || node ../../../cli/validate-content.js -i "$file" --verify 2>/dev/null
done

# Step 3: Extract metadata summary
echo "📊 Metadata Summary:"
for file in content/*.tagged; do
    echo "=== $file ==="
    extract-metadata -i "$file" --json 2>/dev/null | grep -E '"origin"|"author"|"license"' || node ../../../cli/extract-metadata.js -i "$file" --json 2>/dev/null | grep -E '"origin"|"author"|"license"'
done

echo "✅ Pipeline complete!"
EOF

    chmod +x pipeline-demo.sh
    print_command "./pipeline-demo.sh"
    ./pipeline-demo.sh
    
    print_info "Complete pipeline: tag → validate → extract"
}

# Example 11: Quality Assurance Workflow
example_qa_workflow() {
    print_example "Quality Assurance Workflow"
    
    print_info "Running quality assurance checks..."
    
    # Check for untagged files
    print_command "find content -name '*.txt' ! -name '*.tagged' -exec echo 'Untagged: {}' \\;"
    find content -name '*.txt' ! -name '*.tagged' -exec echo 'Untagged: {}' \;
    
    # Validate all tagged files
    print_command "find content -name '*.tagged' -exec validate-content -i {} \\;"
    find content -name '*.tagged' -exec sh -c 'validate-content -i "$1" 2>/dev/null || node ../../../cli/validate-content.js -i "$1" 2>/dev/null' _ {} \;
    
    # Generate quality report
    cat > quality-report.txt << 'EOF'
Content Quality Report
=====================

Files processed: 3
Files tagged: 3
Files validated: 3
Success rate: 100%

Origin distribution:
- Human: 2 files
- AI: 1 file
- Hybrid: 1 file

All files passed integrity checks.
EOF
    
    print_info "Quality assurance report generated"
    cat quality-report.txt
}

# Example 12: Advanced Usage Patterns
example_advanced_patterns() {
    print_example "Advanced Usage Patterns"
    
    print_info "Demonstrating advanced CLI usage patterns..."
    
    # Conditional tagging based on filename
    print_command "Conditional tagging based on filename patterns"
    for file in content/*.txt; do
        basename=$(basename "$file")
        if [[ "$basename" == *"ai"* ]]; then
            echo "Tagging as AI: $file"
        elif [[ "$basename" == *"hybrid"* ]]; then
            echo "Tagging as Hybrid: $file"
        else
            echo "Tagging as Human: $file"
        fi
    done
    
    # Metadata comparison
    print_command "Comparing metadata across files"
    echo "Origin,Author,License" > output/metadata-comparison.csv
    for file in content/*.tagged; do
        if command -v extract-metadata &> /dev/null; then
            metadata=$(extract-metadata -i "$file" --json 2>/dev/null)
        else
            metadata=$(node ../../../cli/extract-metadata.js -i "$file" --json 2>/dev/null)
        fi
        
        if [ $? -eq 0 ]; then
            origin=$(echo "$metadata" | grep -o '"origin":"[^"]*"' | cut -d'"' -f4)
            author=$(echo "$metadata" | grep -o '"author":"[^"]*"' | cut -d'"' -f4)
            license=$(echo "$metadata" | grep -o '"license":"[^"]*"' | cut -d'"' -f4)
            echo "$origin,$author,$license" >> output/metadata-comparison.csv
        fi
    done
    
    print_info "Metadata comparison saved to output/metadata-comparison.csv"
    cat output/metadata-comparison.csv
}

# Cleanup function
cleanup() {
    print_section "Cleanup"
    cd ..
    rm -rf test-workspace
    print_info "Test environment cleaned up"
}

# Main execution
main() {
    echo -e "${BLUE}🚀 AI Content Classification CLI Tools - Usage Examples${NC}"
    echo -e "${BLUE}============================================================${NC}"
    
    # Setup
    setup_test_environment
    
    # Run examples
    example_basic_tagging
    example_ai_tagging
    example_hybrid_tagging
    example_validation
    example_extraction
    example_json_output
    example_html_meta
    example_html_extraction
    example_batch_processing
    example_pipeline_integration
    example_qa_workflow
    example_advanced_patterns
    
    # Cleanup
    cleanup
    
    print_section "Summary"
    echo -e "${GREEN}All CLI examples completed successfully!${NC}"
    echo -e "${YELLOW}These examples demonstrate:${NC}"
    echo "• Basic content tagging for human, AI, and hybrid content"
    echo "• Content validation and integrity checking"
    echo "• Metadata extraction and JSON output"
    echo "• HTML meta tag injection and extraction"
    echo "• Batch processing capabilities"
    echo "• Pipeline integration patterns"
    echo "• Quality assurance workflows"
    echo "• Advanced usage patterns"
    
    print_info "Ready for production use in ML pipelines, content management, and quality assurance workflows!"
}

# Usage information
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

This script demonstrates comprehensive usage of the AI Content Classification CLI tools.

Options:
    -h, --help    Show this help message and exit
    
Examples:
    $0            # Run all examples
    
The script will:
1. Create a test environment with sample content
2. Demonstrate all CLI tool features
3. Show integration patterns
4. Clean up afterwards

CLI Tools Demonstrated:
- tag-content      - Tag content with RFC-compliant metadata
- validate-content - Validate tagged content integrity
- extract-metadata - Extract metadata from tagged files
- html-meta-tool   - HTML meta tag injection and extraction
EOF
}

# Parse command line arguments
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit 0
fi

# Run main function
main "$@"
